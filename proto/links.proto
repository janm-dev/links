syntax = "proto3";
package links;

// The links gRPC API, providing a remote interface to the backend store. This
// RPC interface roughly mimics `links::store::Store`.
service Links {
	// Get the link corresponding to the id.
	rpc GetRedirect (GetRedirectRequest) returns (GetRedirectResponse);
	// Set a redirect by its id and link. Returns the old link, if any.
	rpc SetRedirect (SetRedirectRequest) returns (SetRedirectResponse);
	// Remove a redirect by its id. Returns the old link, if any.
	rpc RemRedirect (RemRedirectRequest) returns (RemRedirectResponse);

	// Get the id corresponding to the vanity path.
	rpc GetVanity (GetVanityRequest) returns (GetVanityResponse);
	// Set a vanity redirect by its path and id. Returns the old id, if any.
	rpc SetVanity (SetVanityRequest) returns (SetVanityResponse);
	// Remove a vanity path by its text content. Returns the old id, if any.
	rpc RemVanity (RemVanityRequest) returns (RemVanityResponse);

	// Get statistics' counts.
	rpc GetStatistics (GetStatisticsRequest) returns (GetStatisticsResponse);
	// Remove statistics. Returns the old counts, if available.
	rpc RemStatistics (RemStatisticsRequest) returns (RemStatisticsResponse);
}

message GetRedirectRequest {
	string id = 1;
}

message GetRedirectResponse {
	optional string link = 1;
}

message SetRedirectRequest {
	string id = 1;
	string link = 2;
}

message SetRedirectResponse {
	optional string link = 1;
}

message RemRedirectRequest {
	string id = 1;
}

message RemRedirectResponse {
	optional string link = 1;
}

message GetVanityRequest {
	string vanity = 1;
}

message GetVanityResponse {
	optional string id = 1;
}

message SetVanityRequest {
	string vanity = 1;
	string id = 2;
}

message SetVanityResponse {
	optional string id = 1;
}

message RemVanityRequest {
	string vanity = 1;
}

message RemVanityResponse {
	optional string id = 1;
}

message StatisticWithValue {
	// The link (id or vanity path) of the statistic
	string link = 1;
	// The type of the statistic
	string type = 2;
	// The data inside the statistic
	string data = 3;
	// The timestamp of the statistic
	string time = 4;
	// The statistic's value as a non-zero unsigned 64-bit integer, or 0 if the
	// statistic wasn't recorded
	uint64 value = 5;
}

message GetStatisticsRequest {
	// The link (id or vanity path) of the statistic (if any)
	optional string link = 1;
	// The type of statistic to get (if any)
	optional string type = 2;
	// The data inside the statistic (if any)
	optional string data = 3;
	// The timestamp of the statistic (if any)
	optional string time = 4;
}

message GetStatisticsResponse {
	// All matching statistics that were found along with their values
	repeated StatisticWithValue statistics = 1;
}

message RemStatisticsRequest {
	// The link (id or vanity path) of the statistic (if any)
	optional string link = 1;
	// The type of statistic to remove (if any)
	optional string type = 2;
	// The data inside the statistic (if any)
	optional string data = 3;
	// The timestamp of the statistic (if any)
	optional string time = 4;
}

message RemStatisticsResponse {
	// All matching statistics that were found along with their values (if they
	// are known, which may depend on the store backend used by the server)
	repeated StatisticWithValue statistics = 1;
}
